#!/usr/bin/env bash

# Define common custom CLI-, Git-, and NPM-related functions
buf () {
	FILENAME=$1
	FILETIME=$(date +%Y%m%d_%H%M)

	cp -a "${FILENAME}" "${FILENAME}-${FILETIME}"
}

commandExists () {
	type "$1" &> /dev/null
}

extract () {

	if [ -f $1 ]; then

		case $1 in
			*.tar.bz2)  tar -jxvf $1                        ;;
			*.tar.gz)   tar -zxvf $1                        ;;
			*.bz2)      bunzip2 $1                          ;;
			*.dmg)      hdiutil mount $1                    ;;
			*.gz)       gunzip $1                           ;;
			*.tar)      tar -xvf $1                         ;;
			*.tbz2)     tar -jxvf $1                        ;;
			*.tgz)      tar -zxvf $1                        ;;
			*.zip)      unzip $1                            ;;
			*.ZIP)      unzip $1                            ;;
			*.pax)      cat $1 | pax -r                     ;;
			*.pax.Z)    uncompress $1 --stdout | pax -r     ;;
			*.rar)      unrar x $1                          ;;
			*.Z)        uncompress $1                       ;;
			*)          echo "'$1' cannot be extracted/mounted via extract()" ;;
		esac
	else

		echo "'$1' is not a valid file"
	fi
}

fs () {

	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi

	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* ./*
	fi
}

gc () {
	BRANCH=${@:-${DEVELOPMENT_BRANCH_NAME}}

	git checkout "${BRANCH}"
}

# NOTE: Adopted from https://github.com/tj/git-extras/blob/master/bin/git-delta
gdlt () {
	BRANCH=${1:-${DEVELOPMENT_BRANCH_NAME}}
	FILTER=${2:-ACM}

	git diff --name-only --diff-filter=${FILTER} "${BRANCH}"
}

gcm () {
	git commit -m "$*"
}

gcma () {
	git commit -am "$*"
}

# grhh () {
# 	ANCESTOR=${1:-0}
#
# 	git reset --hard HEAD~$ANCESTOR
# }

grsh () {
	ANCESTOR=${1:-1}

	git reset --soft HEAD~$ANCESTOR
}

gss () {
	git stash save "$*"
}

lsgrep () {
	ls | grep "$*"
}

md () {
	mkdir -p "$@" && cd "$@" || exit
}

trees () {

	if commandExists tree; then
		tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
	else
		echo 'The `tree` command is not available.'
	fi
}

# Define custom CLI-, Git-, and NPM-related functions for use with Invision
if [ -d "$INVISION_PATH" ]; then

	gpa () {
		DEFAULT_ALIASES=(inv invc inve2e invui)

		ALIASES=("${*:-${DEFAULT_ALIASES[@]}}")
		CURRENT_DIRECTORY="$PWD"

		for i in "${ALIASES[@]}"; do

			CUSTOM_ALIAS=${i}
			CUSTOM_ALIAS_LENGTH=${#CUSTOM_ALIAS}
			CUSTOM_ALIAS_LENGTH=$((CUSTOM_ALIAS_LENGTH+1))

			RESULT=`eval ${BASH_ALIASES[$CUSTOM_ALIAS]} && gp`

			echo "$CUSTOM_ALIAS:"
			printf '=%.0s' $(seq 1 $CUSTOM_ALIAS_LENGTH)
			echo -e "\n"
			echo "$RESULT"
			echo -e "\n"
		done

		cd $CURRENT_DIRECTORY || exit
	}

	nia () {
		DEFAULT_ALIASES=(invc invui invr invcc invbo invstu invsec invd inve2e inv)

		ALIASES=("${*:-${DEFAULT_ALIASES[@]}}")
		CURRENT_DIRECTORY="$PWD"

		for i in "${ALIASES[@]}"; do

			CUSTOM_ALIAS=${i}
			CUSTOM_ALIAS_LENGTH=${#CUSTOM_ALIAS}
			CUSTOM_ALIAS_LENGTH=$((CUSTOM_ALIAS_LENGTH+1))

			RESULT=`eval ${BASH_ALIASES[$CUSTOM_ALIAS]} && ni`

			echo "$CUSTOM_ALIAS:"
			printf '=%.0s' $(seq 1 $CUSTOM_ALIAS_LENGTH)
			echo -e "\n"
			echo "$RESULT"
			echo -e "\n"
		done

		cd $CURRENT_DIRECTORY || exit
	}
fi