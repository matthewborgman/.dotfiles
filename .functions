#!/usr/bin/env bash

source "${DOTFILES_PATH}/functions/bootstrap.bash"

# Define common custom CLI-related functions

## Backup file
buf () {
	FILENAME=$1
	FILETIME=$(date +%Y%m%d_%H%M)

	cp -a "${FILENAME}" "${FILENAME}-${FILETIME}"
}

## Extract an archive
extract () {

	if [ -f $1 ]; then

		case $1 in
			*.tar.bz2)  tar -jxvf $1                        ;;
			*.tar.gz)   tar -zxvf $1                        ;;
			*.bz2)      bunzip2 $1                          ;;
			*.dmg)      hdiutil mount $1                    ;;
			*.gz)       gunzip $1                           ;;
			*.tar)      tar -xvf $1                         ;;
			*.tbz2)     tar -jxvf $1                        ;;
			*.tgz)      tar -zxvf $1                        ;;
			*.zip)      unzip $1                            ;;
			*.ZIP)      unzip $1                            ;;
			*.pax)      cat $1 | pax -r                     ;;
			*.pax.Z)    uncompress $1 --stdout | pax -r     ;;
			*.rar)      unrar x $1                          ;;
			*.Z)        uncompress $1                       ;;
			*)          echo "'$1' cannot be extracted/mounted via extract()" ;;
		esac
	else

		echo "'$1' is not a valid file"
	fi
}

## Display filesize for the given files or the contents of the current directory
fs () {

	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi

	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* ./*
	fi
}

## Search history
hgrep () {
	history | grep -i "$*"
}

## Search the current directory
lsgrep () {
	ls | grep -i "$*"
}

## Make directory and change to it
md () {
	mkdir -pv "$@" && cd "$@" || exit
}

## Search current processes
psgrep () {
	ps auwx | grep -i "$*"
}

## Display hierarchy for the current directory
trees () {

	if commandExists tree; then
		tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
	else
		echo 'The `tree` command is not available.'
	fi
}

# Define CLI-, Invision-, and personal project-related functions
for file in $DOTFILES_PATH/functions/*; do
	FILENAME=$(basename "$file")

	[ $FILENAME != "bootstrap.bash" ] && [ -r "$file" ] && [ -f "$file" ] && source "$file"
done

unset file